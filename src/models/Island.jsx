/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: davevink (https://sketchfab.com/davevink)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/low-poly-island-98960ad16eae47b993b0351609e2907b
Title: Low Poly Island
*/

import { useRef, useState, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import { a } from '@react-spring/three'

import islandScene from '/assets/3d/island.glb'


const Island = ({ setCurrentStage, ...props }) => {
    const islandRef = useRef();

    //figure out how to make this more efficient in the future
    const [active1, setActive1] = useState(false)
    const [active2, setActive2] = useState(false)
    const [active3, setActive3] = useState(false)
    const [active4, setActive4] = useState(false)
    const [active5, setActive5] = useState(false)
    const [active6, setActive6] = useState(false)
    const [active7, setActive7] = useState(false)
    const [active8, setActive8] = useState(false)
    const [active9, setActive9] = useState(false)
    const [active10, setActive10] = useState(false)
    const [active11, setActive11] = useState(false)
    const [active12, setActive12] = useState(false)
    const [active13, setActive13] = useState(false)
    const [active14, setActive14] = useState(false)
    const [active15, setActive15] = useState(false)


    const { gl, viewport } = useThree();
    const { nodes, materials } = useGLTF(islandScene)

    function timeout(delay) {
        return new Promise(res => setTimeout(res, delay));
    }

    function treeEnter(num) {
        if (num === 1) {
            setCurrentStage(1);
            setActive1(true);
        } else if (num === 2) {
            setCurrentStage(2);
            setActive2(true);
        } else if (num === 3) {
            setCurrentStage(3);
            setActive3(true);
        }
    }
    async function treeLeave() {
        await timeout(3000);
        setCurrentStage(0);
        setActive1(false);
        setActive2(false);
        setActive3(false);
    }

    /*
    will also want to add isRotating, setIsRotating, setCurrentStage, 
    to the island parameters
    
        const lastX = useRef(0);
        const lastY = useRef(0);
    
        const rotationSpeed = useRef(0);
        const dampingFactor = 0.95;
    
        const onClick = (e) => {
            e.stopPropagation();
            e.preventDefault();
            setIsRotating(true);
    
            const clientX = e.touches
                ? e.touches[0].clientX
                : e.clientX
    
            const clientY = e.touches
                ? e.touches[0].clientY
                : e.clientY
    
            lastX.current = clientX;
            lastY.current = clientY;
        }
    
        const onRelease = (e) => {
            e.stopPropagation();
            e.preventDefault();
            setIsRotating(false);
        }
    
        const onMove = (e) => {
            e.stopPropagation();
            e.preventDefault();
    
            if (isRotating) {
                const clientX = e.touches
                    ? e.touches[0].clientX
                    : e.clientX
    
    
                const clientY = e.touches
                    ? e.touches[0].clientY
                    : e.clientY
    
    
                const delta = (clientX - lastX.current) / viewport.width;
                const delta2 = (clientY - lastY.current) / viewport.height;
    
                islandRef.current.rotation.y += delta * 0.01 * Math.PI;
                islandRef.current.rotation.x += delta2 * 0.01 * Math.PI;
    
                lastY.current = clientY;
                lastX.current = clientX;
    
                rotationSpeed.current = delta * 0.01 * Math.PI;
            }
        }
    
        const onKeyPressed = (e) => {
            if (e.key === 'ArrowLeft') {
                if (!isRotating) setIsRotating(true);
                islandRef.current.rotation.y += 0.01 * Math.PI;
            } else if (e.key === 'ArrowRight') {
                if (!isRotating) setIsRotating(true);
                islandRef.current.rotation.y -= 0.01 * Math.PI;
            } else if (e.key === 'ArrowUp') {
                if (!isRotating) setIsRotating(true);
                islandRef.current.rotation.x += 0.01 * Math.PI;
            } else if (e.key === 'ArrowDown') {
                if (!isRotating) setIsRotating(true);
                islandRef.current.rotation.x -= 0.01 * Math.PI;
            }
        }
    
        const onKeyReleased = (e) => {
            if (e.key === 'ArrowLeft'
                || e.key === 'ArrowRight'
                || e.key === 'ArrowUp'
                || e.key === 'ArrowDown') {
                setIsRotating(false);
            }
        }
    
        useFrame(() => {
            if (!isRotating) {
                rotationSpeed.current *= dampingFactor;
    
                if (Math.abs(rotationSpeed.current) < 0.001) {
                    rotationSpeed.current = 0;
    
                }
            } else {
                const rotation = islandRef.current.rotation.y;
    
                const normalizedRotation =
                    ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
    
                
    
            }
        })
    
        useEffect(() => {
            const canvas = gl.domElement;
            canvas.addEventListener('pointerdown', onClick);
            canvas.addEventListener('pointerup', onRelease);
            canvas.addEventListener('pointermove', onMove);
            document.addEventListener('keydown', onKeyPressed);
            document.addEventListener('keyup', onKeyReleased);
    
            return () => {
                canvas.removeEventListener('pointerdown', onClick);
                canvas.removeEventListener('pointerup', onRelease);
                canvas.removeEventListener('pointermove', onMove);
                document.removeEventListener('keydown', onKeyPressed);
                document.removeEventListener('keyup', onKeyReleased);
    
            }
    
        }, [gl, onClick, onRelease, onMove])
        */

    return (
        <a.group ref={islandRef}{...props} position={[0, 0, 0]}>
            <group position={[0, -1, 0.5]} rotation={[-1.5, 0, 1]} scale={0.5}>
                <group
                    position={[-0.285, -4.229, 2.516]}
                    rotation={[-0.103, -0.306, -2.911]}
                    scale={active1 ? 0.5 : 0.4}
                    onClick={() => treeEnter(1)}
                    onPointerLeave={() => treeLeave()}
                    ref={islandRef}
                >
                    <mesh
                        geometry={nodes['Material-material'].geometry}
                        material={materials['Material.009']}
                    />
                    <mesh
                        geometry={nodes['Material_004-material'].geometry}
                        material={materials['Material.013']}
                    />
                    <mesh
                        geometry={nodes['Material_005-material'].geometry}
                        material={materials['Material.014']}
                    />
                    <mesh
                        geometry={nodes['Material_006-material'].geometry}
                        material={materials['Material.015']}
                    />
                </group>
                <group
                    position={[-4.052, 0.78, 2.228]}
                    rotation={[-0.021, -0.121, 3.084]}
                    scale={active2 ? 0.5 : 0.4}
                    onClick={() => treeEnter(2)}
                    onPointerLeave={() => treeLeave()}
                    ref={islandRef}
                >
                    <mesh
                        geometry={nodes['Material-material001'].geometry}
                        material={materials['Material.012']}
                    />
                    <mesh
                        geometry={nodes['Material_004-material001'].geometry}
                        material={materials['Material.013']}
                    />
                    <mesh
                        geometry={nodes['Material_005-material001'].geometry}
                        material={materials['Material.014']}
                    />
                    <mesh
                        geometry={nodes['Material_006-material001'].geometry}
                        material={materials['Material.015']}
                    />
                </group>
                <group
                    position={[3.003, 0.26, 2.775]}
                    rotation={[0.27, 0.035, -0.733]}
                    scale={active3 ? 0.5 : 0.4}
                    onClick={() => treeEnter(3)}
                    onPointerLeave={() => treeLeave()}
                    ref={islandRef}
                >
                    <mesh
                        geometry={nodes['Material-material002'].geometry}
                        material={materials['Material.012']}
                    />
                    <mesh
                        geometry={nodes['Material_004-material002'].geometry}
                        material={materials['Material.013']}
                    />
                    <mesh
                        geometry={nodes['Material_005-material002'].geometry}
                        material={materials['Material.014']}
                    />
                    <mesh
                        geometry={nodes['Material_006-material002'].geometry}
                        material={materials['Material.015']}
                    />
                </group>
                <group position={[6.16, -3.999, 3.419]} rotation={[-0.222, -0.111, 2.925]} scale={0.168}>
                    <mesh
                        geometry={nodes['Material_007-material'].geometry}
                        material={materials['Material.016']}
                    />
                    <mesh
                        geometry={nodes['Material_008-material'].geometry}
                        material={materials['Material.017']}
                    />
                </group>
                <group position={[5.391, -5.353, 3.388]} rotation={[-0.05, -0.192, 0.804]} scale={0.168}>
                    <mesh
                        geometry={nodes['Material_007-material001'].geometry}
                        material={materials['Material.016']}
                    />
                    <mesh
                        geometry={nodes['Material_008-material001'].geometry}
                        material={materials['Material.017']}
                    />
                </group>
                <group position={[8.799, -0.263, 4.747]} rotation={[0.081, -0.183, -2.97]} scale={0.175}>
                    <mesh
                        geometry={nodes['Material_007-material002'].geometry}
                        material={materials['Material.016']}
                    />
                    <mesh
                        geometry={nodes['Material_008-material002'].geometry}
                        material={materials['Material.017']}
                    />
                </group>
                <group position={[8.703, -0.833, 4.347]} rotation={[0.004, -0.205, 3.066]} scale={0.128}>
                    <mesh
                        geometry={nodes['Material_007-material003'].geometry}
                        material={materials['Material.016']}
                    />
                    <mesh
                        geometry={nodes['Material_008-material003'].geometry}
                        material={materials['Material.017']}
                    />
                </group>
                <group position={[5.385, 8.645, 3.911]} rotation={[-0.013, -0.022, 2.202]} scale={0.175}>
                    <mesh
                        geometry={nodes['Material_007-material004'].geometry}
                        material={materials['Material.016']}
                    />
                    <mesh
                        geometry={nodes['Material_008-material004'].geometry}
                        material={materials['Material.017']}
                    />
                </group>
                <group position={[5.891, 7.681, 4.015]} rotation={[-0.063, -0.204, 2.979]} scale={0.128}>
                    <mesh
                        geometry={nodes['Material_007-material005'].geometry}
                        material={materials['Material.016']}
                    />
                    <mesh
                        geometry={nodes['Material_008-material005'].geometry}
                        material={materials['Material.017']}
                    />
                </group>
                <group position={[5.327, 7.997, 3.763]} rotation={[0.117, 0.012, -2.699]} scale={0.128}>
                    <mesh
                        geometry={nodes['Material_007-material006'].geometry}
                        material={materials['Material.016']}
                    />
                    <mesh
                        geometry={nodes['Material_008-material006'].geometry}
                        material={materials['Material.017']}
                    />
                </group>
                <group position={[-0.248, 1.873, 2.999]} rotation={[0.089, -0.195, 1.416]} scale={0.157}>
                    <mesh
                        geometry={nodes['Material_007-material007'].geometry}
                        material={materials['Material.016']}
                    />
                    <mesh
                        geometry={nodes['Material_008-material007'].geometry}
                        material={materials['Material.017']}
                    />
                </group>
                <group position={[-1.584, 7.241, 2.458]} rotation={[-0.035, -0.121, 1.039]} scale={0.185}>
                    <mesh
                        geometry={nodes['Material_007-material008'].geometry}
                        material={materials['Material.016']}
                    />
                    <mesh
                        geometry={nodes['Material_008-material008'].geometry}
                        material={materials['Material.017']}
                    />
                </group>
                <group position={[-2.261, 6.909, 2.441]} rotation={[0.322, 0.045, 1.794]} scale={0.139}>
                    <mesh
                        geometry={nodes['Material_007-material009'].geometry}
                        material={materials['Material.016']}
                    />
                    <mesh
                        geometry={nodes['Material_008-material009'].geometry}
                        material={materials['Material.017']}
                    />
                </group>
                <group position={[5.163, -4.212, 3.155]} rotation={[0.041, -0.332, 1.361]} scale={0.138}>
                    <mesh
                        geometry={nodes['Material_007-material010'].geometry}
                        material={materials['Material.016']}
                    />
                    <mesh
                        geometry={nodes['Material_008-material010'].geometry}
                        material={materials['Material.017']}
                    />
                </group>
                <mesh
                    geometry={nodes['Material_002-material'].geometry}
                    material={materials['Material.010']}
                    position={[3.785, 1.865, 0.305]}
                    rotation={[-0.005, -0.026, -2.087]}
                    scale={10}
                />
                <mesh
                    geometry={nodes['Material_003-material'].geometry}
                    material={materials['Material.018']}
                    position={[1.396, 5.775, 8.151]}
                    scale={0.674}
                />
                <mesh
                    geometry={nodes['Material_001-material'].geometry}
                    material={materials['Material.011']}
                    position={[3.505, 2.009, 1.695]}
                    rotation={[-0.005, -0.026, -2.087]}
                    scale={12.565}
                />
            </group>
        </a.group>
    )
}


export default Island;


